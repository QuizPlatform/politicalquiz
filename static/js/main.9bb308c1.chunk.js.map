{"version":3,"sources":["components/Quiz2.js","components/des.js","App.js","serviceWorker.js","index.js"],"names":["Quiz2","props","handleAnswerChange","val","setState","currentAnswer","target","value","handleAnswerSubmit","event","preventDefault","state","firebase","firestore","collection","doc","get","then","toUpdateDict","data","secretId","set","answers","merge","catch","err","alert","round","roundLoading","oldAnswer","firebaseListener","answerListener","this","onSnapshot","snap","toUpdate","prevProps","prevState","console","log","error","className","type","style","margin","maxWidth","textAlign","marginTop","id","Grid","container","spacing","item","xs","md","Paper","elevation","padding","onSubmit","TextField","width","onChange","multiline","placeholder","variant","label","required","display","Button","size","color","Typography","fontWeight","whiteSpace","PureComponent","LoginHandler2","inputValue","handleFormSubmit","bind","handleInputChange","submitHandler","trim","test","React","Component","Transition","forwardRef","ref","Slide","direction","App","loginSubmitHandler","loginLoading","exists","failDialog","failMsg","finally","handleClickOpen","handleClose","credits","Dialog","open","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","onClick","key","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9bb308c1.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nimport ReactLoading from 'react-loading';\nimport {\n  Grid, Paper, TextField, Button, Typography\n} from '@material-ui/core';\n\n// Problem, if we have again moved to 2nd question from 4th question\n// The answer will not be called as update works for all the values\n\nclass Quiz2 extends PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      round: '',\n      currentAnswer: '',\n      roundLoading: true,\n      err: null,\n      oldAnswer: ''\n    }\n\n    this.firebaseListener = '';\n\n    // TOOD add realtime later\n    this.answerListener = '';\n  }\n\n  componentDidMount() {\n    this.firebaseListener = firebase.firestore().collection('admin')\n      .doc('adminControls069')\n      .onSnapshot(\n        (snap) => {\n\n          // console.log('Prediction data', predictionData);\n          // JUST FOR TESTING\n          try {\n            const round = snap.data()['round'];\n\n            this.setState({\n              round: round,\n              roundLoading: false\n            });\n\n          } catch (err) {\n            this.setState({\n              err: 'No Healthy Internet Connection, Try to Reload the Page',\n              roundLoading: false\n            });\n          }\n        },\n        (err) => {\n          this.setState({\n            err: 'Something Went Wrong',\n            roundLoading: false\n          });\n        },\n      );\n\n    this.answerListener = firebase.firestore().collection('registered')\n      .doc(this.props.secretId)\n      .onSnapshot(\n        (snap) => {\n          // console.log(snap.id);\n          // console.log(snap.data());\n\n          const round = this.state.round;\n          const toUpdate = snap.data()['answers'][round]\n\n          // Updating with the latest answer\n          this.setState({\n            currentAnswer: toUpdate,\n            oldAnswer: toUpdate\n          });\n        },\n        (err) => {\n          this.setState({\n            err: 'Soemthing Went Wrong',\n          });\n        }\n      );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const newRound = this.state.round;\n    // console.log(\"New Round\", newRound);\n    // console.log(prevState.round);\n\n    if (newRound !== prevState.round) {\n      console.log(\"Round has been changed!\");\n\n      // Currrently clearing the previous answer\n      this.setState({\n        currentAnswer: '',\n        oldAnswer: ''\n      });\n\n    }\n  }\n\n  componentWillUnmount() {\n    try {\n      this.firebaseListener();\n    } catch (error) {\n      console.log(\"Ignore Error in predict\");\n    }\n    try {\n      this.answerListener();\n    } catch (error) {\n      console.log(\"Ignore Error in predict\");\n    }\n  }\n\n  handleAnswerChange = (val) => {\n    // console.log(val.target.value);\n    this.setState({\n      currentAnswer: val.target.value\n    });\n  }\n\n  handleAnswerSubmit = (event) => {\n    event.preventDefault();\n\n    const currentAnswer = this.state.currentAnswer;\n\n    firebase.firestore().collection('admin')\n      .doc('adminControls069')\n      .get().then(doc => {\n\n        const toUpdateDict = {};\n        toUpdateDict[doc.data()['round']] = currentAnswer;\n\n        // console.log(\"Answer event called\", round, currentAnswer);\n\n        // Update the answer here, the value will come back from the snapshot listener\n        firebase.firestore()\n          .collection('registered')\n          .doc(this.props.secretId)\n          .set({\n            answers: toUpdateDict\n          }, { merge: true }).then(val => {\n          });\n        ;\n\n      }).catch(err => {\n        alert('Update Failed');\n      });\n  }\n\n  render() {\n    if (this.state.roundLoading) {\n      //Currenlty the round is loading\n      return (\n        <div className=\"loading-container\">\n          <ReactLoading\n            type={\"cylon\"}\n            style={{ margin: \"auto\", maxWidth: \"320px\" }} />\n        </div>\n      );\n    } else {\n\n      const round = this.state.round;\n      // Waiting for next round\n      if (round === '0') {\n        return (\n          <h2 style={{ textAlign: \"center\", marginTop: \"32px\" }}>Next Round is Going to be Started soon!</h2>\n        );\n      }\n      else {\n        // The questions are running\n        // Loading has finished start working\n        return (\n\n          <div id=\"answer-panel\" style={{ marginTop: \"32px\" }} className=\"jumbotron container\">\n\n            <Grid container spacing={2} >\n              <Grid item xs={1} md={1}></Grid>\n              <Grid item xs={10} md={7}>\n                <Paper id=\"answer-container\" elevation={3} style={{ padding: \"12px 12px 32px 12px\", textAlign: \"center\" }} >\n                  <h2 className=\"text-center\">Answer for {` `} {this.state.round}</h2>\n                  <form onSubmit={this.handleAnswerSubmit} className=\"from\">\n                    <div className=\"form-group\">\n                      <TextField\n                        style={{ margin: \"12px 8px 16px\", width: \"70%\" }}\n                        onChange={this.handleAnswerChange}\n                        value={this.state.currentAnswer}\n                        className=\"form-control\"\n                        multiline\n                        placeholder=\"Enter your secret ID\"\n                        variant={\"outlined\"}\n                        label=\"Write Answer\"\n                        required\n                      />\n                    </div>\n                    <div style={{ display: \"flex\", marginTop: \"8px\" }}>\n                      <Button variant=\"contained\" size=\"small\" color=\"primary\" type=\"submit\" style={{ margin: \"auto\", width: \"70%\" }}>Submit</Button>\n                    </div>\n\n                  </form>\n                </Paper>\n              </Grid>\n              <Grid item md={4}>\n                <div>\n                  <Typography style={{ color: \"#555555\" }}>You can always change your answer until this Question is Open!</Typography>\n                  <p> Your current Answer is </p>\n                  <p style={{ fontWeight: \"800\", whiteSpace: \"pre-line\" }}>{this.state.oldAnswer}</p>\n                </div>\n              </Grid>\n            </Grid >\n\n          </div>\n        );\n      }\n    }\n  }\n}\n\nexport default Quiz2\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button'\n\nexport default class LoginHandler2 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: '',\n    };\n\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleFormSubmit(event) {\n    event.preventDefault();\n    // console.log('From submit called');\n    // console.log('Value', this.state.inputValue);\n\n    if (typeof this.props.submitHandler === 'function') {\n      this.props.submitHandler(this.state.inputValue.trim());\n    }\n  }\n\n\n  handleInputChange(event) {\n    // console.log(event.target.value);\n\n    let value = event.target.value;\n\n    var format = /[!@#$%^&*()_+\\-=\\]{};':\"\\\\|,.<>/?]+/;\n    if (format.test(value)) {\n      alert('No special characters are allowed!');\n    } else {\n      this.setState({\n        inputValue: value,\n      });\n    }\n\n  }\n\n  render() {\n    return (\n      <Grid container spacing={2} >\n        <Grid item xs={2} md={4}></Grid>\n        <Grid item xs={8} md={4}>\n          <Paper elevation={3} style={{ padding: \"12px 12px 32px 12px\", textAlign: \"center\" }} >\n            <h1>Login To Portal</h1>\n            <form onSubmit={this.handleFormSubmit} className=\"from\">\n              <div className=\"form-group\">\n                <TextField\n                  style={{ margin: \"12px 8px\" }}\n                  value={this.state.inputValue}\n                  onChange={this.handleInputChange}\n                  className=\"form-control\"\n                  placeholder=\"Enter your secret ID\"\n                  required\n                />\n              </div>\n              <div style={{ display: \"flex\", marginTop: \"8px\" }}>\n                <Button variant=\"contained\" size=\"small\" color=\"secondary\" type=\"submit\" style={{ margin: \"auto\" }}>Submit</Button>\n              </div>\n\n            </form>\n          </Paper>\n        </Grid>\n        <Grid item xs={2} md={4}></Grid>\n      </Grid >\n    );\n  }\n}\n","import React, { PureComponent } from 'react'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nimport ReactLoading from 'react-loading';\nimport Quiz2 from './components/Quiz2';\n\nimport LoginHandler2 from './components/des';\nimport { Grid, Slide, Dialog, DialogActions, DialogTitle, DialogContent, Button, DialogContentText } from '@material-ui/core';\nimport './App.css'\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"down\" ref={ref} {...props} />;\n});\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      secretId: '',\n      loginLoading: false,\n      err: null,\n      failDialog: false,\n      failMsg: \"Login Failed!\"\n    }\n  }\n\n  loginSubmitHandler = (val) => {\n    // console.log(val);\n\n    this.setState({\n      loginLoading: true\n    })\n\n    firebase.firestore().collection('registered')\n      .doc(val).get().then(doc => {\n        if (doc.exists) {\n          // Yeah finally success\n          // console.log(\"Successful\", val);\n          this.setState({\n            secretId: val\n          });\n        } else {\n          this.setState({\n            failDialog: true,\n            failMsg: 'Login Failed'\n          });\n        }\n      }).catch(err => {\n        this.setState({\n          failDialog: true,\n          failMsg: 'Something went Wrong!'\n        });\n      }).finally(() => {\n        this.setState({ loginLoading: false });\n      });\n  }\n\n  handleClickOpen = () => {\n    this.setState({\n      failDialog: true,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      failDialog: false,\n    });\n  };\n\n  render() {\n\n    let credits = (\n      <Grid container spacing={2} style={{ marginTop: \"auto\" }} >\n        <Grid item md={6} style={{ textAlign: \"center\" }}>\n          <a target=\"_none\" href=\"https://pnotes.web.app\">Click Here for Rules</a>\n        </Grid>\n        <Grid item md={6} style={{ textAlign: \"center\" }}>\n          © CheckM8 - Maintained by {` `}\n          <a target=\"_none\" href=\"https://dehla.herokuapp.com\">Dehla Pakad </a>\n          Team\n        </Grid>\n      </Grid>,\n\n      <Dialog\n        open={this.state.failDialog}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={this.handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">{this.state.failMsg}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-slide-description\">\n            Check your secret Id and try again!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={this.handleClose} color=\"primary\">\n            Okay\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n\n    if (this.state.loginLoading) {\n      //Currenlty the round is loading\n      return (\n        <div className=\"loading-container\">\n          <ReactLoading\n            type={\"cylon\"}\n            style={{ margin: \"auto\", maxWidth: \"320px\" }} />\n        </div>\n      );\n    } else {\n\n      const secretId = this.state.secretId;\n\n      if (secretId) {\n        return (\n          <div id=\"main\" key={0}>\n            <Quiz2 secretId={secretId} />\n            {credits}\n          </div>\n        )\n      } else {\n        return (\n          <div id=\"main\" key={0}>\n            <div id=\"main-login-container\" style={{ marginTop: \"48px\" }}>\n              <LoginHandler2 submitHandler={this.loginSubmitHandler} />\n            </div>\n            {credits}\n          </div>\n        )\n      }\n    }\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport firebase from 'firebase/app';\nimport 'firebase/analytics';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyB1mz728tc9dqKGLUiPOAwxBxg20Gx4mSE\",\n  authDomain: \"quizpriyam.firebaseapp.com\",\n  databaseURL: \"https://quizpriyam.firebaseio.com\",\n  projectId: \"quizpriyam\",\n  storageBucket: \"quizpriyam.appspot.com\",\n  messagingSenderId: \"968131692426\",\n  appId: \"1:968131692426:web:467ddbadc7ef1ac1d4ea73\",\n  measurementId: \"G-WQTBNGZXQS\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}