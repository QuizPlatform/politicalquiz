{"version":3,"sources":["components/LoginHandler.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["LoginHandler","props","state","inputValue","handleFormSubmit","bind","handleInputChange","event","preventDefault","this","submitHandler","trim","value","target","test","alert","setState","className","onSubmit","onChange","placeholder","required","style","display","margin","type","React","Component","Quiz","handleAnswerChange","val","currentAnswer","handleAnswerSubmit","firebase","firestore","collection","doc","get","then","toUpdateDict","data","secretId","set","answers","merge","catch","err","round","roundLoading","oldAnswer","firebaseListener","answerListener","onSnapshot","snap","toUpdate","prevProps","prevState","console","log","error","maxWidth","id","marginTop","width","PureComponent","App","loginSubmitHandler","loginLoading","exists","finally","key","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1c442680.chunk.js","sourcesContent":["import React from 'react';\n\nclass LoginHandler extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: '',\n    };\n\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleFormSubmit(event) {\n    event.preventDefault();\n    // console.log('From submit called');\n    // console.log('Value', this.state.inputValue);\n\n    if (typeof this.props.submitHandler === 'function') {\n      this.props.submitHandler(this.state.inputValue.trim());\n    }\n  }\n\n\n  handleInputChange(event) {\n    // console.log(event.target.value);\n\n    let value = event.target.value;\n\n    var format = /[!@#$%^&*()_+\\-=\\]{};':\"\\\\|,.<>/?]+/;\n    if(format.test(value)){\n      alert('No special characters are allowed!');\n    } else {\n      this.setState({\n        inputValue: value,\n      });\n    }\n    \n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"jumbotron\">\n          <form onSubmit={this.handleFormSubmit} className=\"from\">\n            <div className=\"form-group\">\n              <input\n                value={this.state.inputValue}\n                onChange={this.handleInputChange}\n                className=\"form-control\"\n                placeholder=\"Enter your secret ID\"\n                required\n              />\n            </div>\n            <div style={{ display: \"flex\" }}>\n              <button className=\"btn btn-info btn-lg\" style={{ margin: \"auto\" }} type=\"submit\">Submit</button>\n            </div>\n\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LoginHandler;\n","import React, { PureComponent } from 'react'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nimport ReactLoading from 'react-loading';\n\n\n// Problem, if we have again moved to 2nd question from 4th question\n// The answer will not be called as update works for all the values\n\nclass Quiz extends PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      round: '',\n      currentAnswer: '',\n      roundLoading: true,\n      err: null,\n      oldAnswer: ''\n    }\n\n    this.firebaseListener = '';\n\n    // TOOD add realtime later\n    this.answerListener = '';\n  }\n\n  componentDidMount() {\n    this.firebaseListener = firebase.firestore().collection('admin')\n      .doc('adminControls069')\n      .onSnapshot(\n        (snap) => {\n\n          // console.log('Prediction data', predictionData);\n          // JUST FOR TESTING\n          try {\n            const round = snap.data()['round'];\n\n            this.setState({\n              round: round,\n              roundLoading: false\n            });\n\n          } catch (err) {\n            this.setState({\n              err: 'No Healthy Internet Connection, Try to Reload the Page',\n              roundLoading: false\n            });\n          }\n        },\n        (err) => {\n          this.setState({\n            err: 'Something Went Wrong',\n            roundLoading: false\n          });\n        },\n      );\n\n    this.answerListener = firebase.firestore().collection('registered')\n      .doc(this.props.secretId)\n      .onSnapshot(\n        (snap) => {\n          // console.log(snap.id);\n          // console.log(snap.data());\n\n          const round = this.state.round;\n          const toUpdate = snap.data()['answers'][round]\n\n          // Updating with the latest answer\n          this.setState({\n            currentAnswer: toUpdate,\n            oldAnswer: toUpdate\n          });\n        },\n        (err) => {\n          this.setState({\n            err: 'Soemthing Went Wrong',\n          });\n        }\n      );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const newRound = this.state.round;\n    // console.log(\"New Round\", newRound);\n    // console.log(prevState.round);\n\n    if (newRound !== prevState.round) {\n      console.log(\"Round has been changed!\");\n\n      // Currrently clearing the previous answer\n      this.setState({\n        currentAnswer: '',\n        oldAnswer: ''\n      });\n\n    }\n  }\n\n  componentWillUnmount() {\n    try {\n      this.firebaseListener();\n    } catch (error) {\n      console.log(\"Ignore Error in predict\");\n    }\n    try {\n      this.answerListener();\n    } catch (error) {\n      console.log(\"Ignore Error in predict\");\n    }\n  }\n\n  handleAnswerChange = (val) => {\n    // console.log(val.target.value);\n    this.setState({\n      currentAnswer: val.target.value\n    });\n  }\n\n  handleAnswerSubmit = (event) => {\n    event.preventDefault();\n\n    const currentAnswer = this.state.currentAnswer;\n\n    firebase.firestore().collection('admin')\n      .doc('adminControls069')\n      .get().then(doc => {\n\n        const toUpdateDict = {};\n        toUpdateDict[doc.data()['round']] = currentAnswer;\n\n        // console.log(\"Answer event called\", round, currentAnswer);\n\n        // Update the answer here, the value will come back from the snapshot listener\n        firebase.firestore()\n          .collection('registered')\n          .doc(this.props.secretId)\n          .set({\n            answers: toUpdateDict\n          }, { merge: true }).then(val => {\n          });\n        ;\n\n      }).catch(err => {\n        alert('Update Failed');\n      });\n  }\n\n  render() {\n    if (this.state.roundLoading) {\n      //Currenlty the round is loading\n      return (\n        <div className=\"loading-container\">\n          <ReactLoading\n            type={\"cylon\"}\n            style={{ margin: \"auto\", maxWidth: \"320px\" }} />\n        </div>\n      );\n    } else {\n\n      const round = this.state.round;\n      // Waiting for next round\n      if (round === '0') {\n        return (\n          <h2>Next Round is Going to be Started soon!</h2>\n        );\n      }\n      else {\n        // The questions are running\n        // Loading has finished start working\n        return (\n          <div id=\"answer-panel\" style={{ marginTop: \"32px\" }} className=\"jumbotron container\">\n            <form className=\"form\" onSubmit={this.handleAnswerSubmit}>\n              <h2 className=\"text-center\">Answer for {` `} {this.state.round}</h2>\n              <div className=\"form-group\">\n                <textarea\n                  id=\"answer-text-area\"\n                  className=\"form-control\"\n                  onChange={this.handleAnswerChange}\n                  value={this.state.currentAnswer}\n                  placeholder=\"Enter Your Answer Here\">\n                </textarea>\n              </div>\n              <div className=\"form-group\">\n                <button type=\"submit\" className=\"btn btn-success\" style={{ width: \"100%\" }} >Submit</button>\n              </div>\n            </form>\n\n            <div>\n              <h3> Your current Answer is </h3>\n              <p>{this.state.oldAnswer}</p>\n              <p>You can always change your answer until this Question is Open!</p>\n            </div>\n\n          </div>\n        );\n      }\n    }\n  }\n}\n\nexport default Quiz\n","import React, { PureComponent } from 'react'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nimport LoginHandler from './components/LoginHandler'\nimport ReactLoading from 'react-loading';\nimport Quiz from './components/Quiz';\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      secretId: '',\n      loginLoading: false,\n      err: null\n    }\n  }\n\n  loginSubmitHandler = (val) => {\n    // console.log(val);\n\n    this.setState({\n      loginLoading: true\n    })\n\n    firebase.firestore().collection('registered')\n      .doc(val).get().then(doc => {\n        if (doc.exists) {\n          // Yeah finally success\n          // console.log(\"Successful\", val);\n          this.setState({\n            secretId: val\n          });\n        } else {\n          alert('Incorrect Password');\n        }\n      }).catch(err => {\n        alert('Something Went Wrong');\n      }).finally(() => {\n        this.setState({ loginLoading: false });\n      });\n  }\n\n  render() {\n    if (this.state.loginLoading) {\n      //Currenlty the round is loading\n      return (\n        <div className=\"loading-container\">\n          <ReactLoading\n            type={\"cylon\"}\n            style={{ margin: \"auto\", maxWidth: \"320px\" }} />\n        </div>\n      );\n    } else {\n\n      const secretId = this.state.secretId;\n\n      if (secretId) {\n        return (\n          <div id=\"main\" key={0}>\n            <Quiz secretId={secretId} />\n          </div>\n        )\n      } else {\n        return (\n          <div id=\"main\" key={0}>\n            <div id=\"main-login-container\" style={{ marginTop: \"48px\" }}>\n              <LoginHandler submitHandler={this.loginSubmitHandler} />\n            </div>\n          </div>\n        )\n      }\n    }\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport firebase from 'firebase/app';\nimport 'firebase/analytics';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyB1mz728tc9dqKGLUiPOAwxBxg20Gx4mSE\",\n  authDomain: \"quizpriyam.firebaseapp.com\",\n  databaseURL: \"https://quizpriyam.firebaseio.com\",\n  projectId: \"quizpriyam\",\n  storageBucket: \"quizpriyam.appspot.com\",\n  messagingSenderId: \"968131692426\",\n  appId: \"1:968131692426:web:467ddbadc7ef1ac1d4ea73\",\n  measurementId: \"G-WQTBNGZXQS\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}